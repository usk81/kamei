//go:generate go run . -output ../kamei.go
package main

import (
	"bytes"
	"cmp"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"slices"
	"text/template"
	"unicode/utf8"
)

type ReadmeRequestParameter struct {
	Count                int
	Output               string
	Template             string
	TemporaryFilePattern string
}

type ReadmeTemplateParameter struct {
	Count int
}

var (
	filename = flag.String("output", "../family_names.go", "output file name")
	readme   = flag.String("readme", "../README.md", "output readme file name")
	readmeja = flag.String("readmeja", "../README-ja.md", "output japanese readme file name")
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	f, err := os.OpenFile("kamei.json", os.O_RDWR, 0666)
	if err != nil {
		return err
	}
	bs, err := io.ReadAll(f)
	_ = f.Close()
	if err != nil {
		return err
	}
	var flats map[string][]string
	if err = json.Unmarshal(bs, &flats); err != nil {
		return err
	}
	for k, v := range flats {
		sortSlice(v)
		flats[k] = v
	}
	l := len(flats)

	familyNames := map[int]map[string][]string{}
	for kanji, rubys := range flats {
		lk := utf8.RuneCountInString(kanji)
		if kanjis, ok := familyNames[lk]; ok {
			kanjis[kanji] = rubys
			familyNames[lk] = kanjis
		} else {
			familyNames[lk] = map[string][]string{
				kanji: rubys,
			}
		}
	}

	var buf bytes.Buffer
	err = template.Must(template.New("tmpl").Parse(tmpl)).Execute(&buf, familyNames)
	if err != nil {
		return err
	}
	w, err := os.OpenFile(*filename, os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	_, err = w.Write(buf.Bytes())
	_ = w.Close()
	if err != nil {
		return err
	}
	j, err := json.MarshalIndent(&flats, "", "  ")
	if err != nil {
		log.Println("json.MarshalIndent")
		return err
	}
	t, err := os.CreateTemp("/tmp", "kamei")
	if err != nil {
		return err
	}
	if _, err = t.Write(j); err != nil {
		_ = t.Close()
		return err
	}
	tmpfilePath := t.Name()
	_ = t.Close()
	if err = os.Rename(tmpfilePath, "./kamei.json"); err != nil {
		_ = os.Remove(tmpfilePath)
		return err
	}
	err = updateReadmeFile(ReadmeRequestParameter{
		Count:                l,
		Output:               *readme,
		Template:             "README.md.tpl",
		TemporaryFilePattern: "kamei_readme",
	})
	if err != nil {
		return err
	}
	err = updateReadmeFile(ReadmeRequestParameter{
		Count:                l,
		Output:               *readmeja,
		Template:             "README-ja.md.tpl",
		TemporaryFilePattern: "kamei_readme_ja",
	})
	if err != nil {
		return err
	}

	return nil
}

func updateReadmeFile(r ReadmeRequestParameter) error {
	fmt.Printf("%#v\n", r)
	tpl, err := template.New(r.Template).ParseFiles(r.Template)
	if err != nil {
		return err
	}
	t, err := os.CreateTemp("/tmp", r.TemporaryFilePattern)
	if err != nil {
		return err
	}
	tmpfilePath := t.Name()
	err = tpl.Execute(t, ReadmeTemplateParameter{
		Count: r.Count,
	})
	_ = t.Close()
	if err != nil {
		return err
	}
	if err = os.Rename(tmpfilePath, r.Output); err != nil {
		_ = t.Close()
		_ = os.Remove(tmpfilePath)
		return err
	}
	return nil
}

func sortSlice(ss []string) {
	slices.SortStableFunc(ss, compare)
}

func compare(a, b string) int {
	la := utf8.RuneCountInString(a)
	lb := utf8.RuneCountInString(b)
	c := cmp.Compare(la, lb)
	if c == 0 {
		return cmp.Compare(a, b)
	}
	return c
}

const tmpl = `// Code generated by genmaps.go; DO NOT EDIT.
package kamei

var familyNames = FamilyNames{
{{range $lk, $kanjis := .}}	{{$lk}}: {
{{range $kanji, $rubys := $kanjis}}		"{{$kanji}}": {
{{range $_, $ruby := $rubys}}			"{{$ruby}}",
{{end}}		},
{{end}}	},
{{end}}}
`
