# kamei

kameiは日本人の名字を管理するパッケージで、名字の一部から該当する名字を取得したり、読み仮名を取得したりするために使用します。

現在、**{{.Count}}** 種の名字を収録しています

## 注意事項

元々は別のプロジェクトで作成していたプログラムのうち名字を管理していた箇所が想定以上に大きくなってきたために、切り出して公開したパッケージになります。
収集していたデータの中には芸名なども含まれているため、通常の名字で使われないものも含まれます。

## インストール

```sh
go get -u github.com/usk81/kamei
```

## 使い方


### All

Allはパッケージに登録されているすべての名字を返却します

```Go
fmt.Printf("%#v", kamei.All())
```

### Find

Findは漢字から読み仮名を返却します。

```Go
fmt.Printf("%#v", kamei.Find("中田"))
// []string{"なかた", "なかだ"}
```

### Contains

Containsはパッケージに登録されている名字から指定した文字列を含む一覧を返却します。

```Go
fmt.Printf("%#v", kamei.Contains("佐"))
// FamilyNames{2:map[string][]string{"佐伯":[]string{"さいき", "さえき", "さはく", "さへき"}, "佐倉":[]string{"さくら", "さのくら"}, "佐原":[]string{"さはら", "さわら"}, "佐山":[]string{"さやま"}, "佐川":[]string{"さかわ", "さがわ"}, "佐田":[]string{"さた", "さだ"}, "佐藤":[]string{"さとう"}, "佐賀":[]string{"さか", "さが"}, "佐野":[]string{"さの"}}, 3:map[string][]string{"亜佐倉":[]string{"あさくら"}, "佐々山":[]string{"ささやま"}, "佐々木":[]string{"ささき"}, "佐久間":[]string{"さくま"}, "宇佐美":[]string{"うさみ"}}}
```

### HasPrefix 

HasSuffixはパッケージに登録されている名字から指定した文字列に前夫一致する名字の一覧を返却します。

```Go
fmt.Printf("%#v", kamei.HasPrefix("佐々"))
// FamilyNames{3:map[string][]string{"佐々山":[]string{"ささやま"}, "佐々木":[]string{"ささき"}}}
```

### HasSuffix

HasSuffixはパッケージに登録されている名字から指定した文字列に後方一致する名字の一覧を返却します。

```Go
fmt.Printf("%#v", kamei.HasSuffix("条"))
// FamilyNames{2:map[string][]string{"一条":[]string{"いちじょう"}, "三条":[]string{"さんじょう"}, "上条":[]string{"うえじょう", "かみしょう", "かみじょう", "じょうじょう"}, "九条":[]string{"くじょう"}, "五条":[]string{"ごじょう"}, "北条":[]string{"ほじょう", "きたじょう", "ほうしょう", "ほうじょう", "ほくじゅう", "ほくじょう"}, "南条":[]string{"なんじょう"}, "斉条":[]string{"さいじょう"}, "斎条":[]string{"さいじょう"}, "新条":[]string{"しんじょう"}, "東条":[]string{"とうじょう"}, "西条":[]string{"さいじょう", "にしじょう"}, "齊条":[]string{"さいじょう"}, "齋条":[]string{"さいじょう"}}, 3:map[string][]string{"東十条":[]string{"ひがしじゅうじょう"}}}
```

### Pickup

Pickupはパッケージに登録されている名字からランダムにいくつか取得します。

> この機能は、テストデータなどで複数の仮想の名前を生成するケースを想定して作成しています

```Go
fmt.Printf("%#v", kamei.Pickup(10))
```
